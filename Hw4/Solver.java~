import java.util.HashMap;
public class Solver {
  private int next_node;
  private HashMap game_tree;
  private MinPQ move_to_process;
    public Solver(Board initial)            // find a solution to the initial board (using the A* algorithm)
    {
      
      /** There will be two data structures I will have to employ:
        * 1) The priority queue to enque all moves that has branched
        * 2) game tree consisting of move branches that could be potential
        * solution
        * There will be an inner class called SearchNode
        * Each instance of SearchNode will hold an instance of Board,
        * priority value as calculated by manhattan priority, move #,
        * a board ID, and a parent board ID
        * The board ID and parent board ID will create the edges in our
        * tree. 
        * */
      next_node = 0;
      game_tree = new HashMap();
      move_to_process = new MinPQ<SearchNode>();
      SearchNode initial_node = new SearchNode(initial, null, Integer.toString(next_node), -1);
      Iterable<Board> puzzle_neighbors = initial_node.search_board.neighbors();
      next_node = next_node + 1;
      for (Board neighbors : puzzle_neighbors)
      {
        SearchNode neighbor_nodes = new SearchNode(neighbors,initial_node.node_id, Integer.toString(next_node),initial_node.move_num);
        next_node = next_node + 1;
      }
      
      move_to_process.insert(initial_node);
      SearchNode popped = (SearchNode) move_to_process.delMin();
      System.out.println(popped.priority);
      //game_tree.put(Integer.toString(next_node),new SearchNode(initial, null, Integer.toString(next_node), -1)); // adding something to the tree
      //SearchNode init = (SearchNode) game_tree.get(Integer.toString(next_node));
      
                    
      
    }

    
    /*
    public boolean isSolvable()             // is the initial board solvable?
    {
      
    }
    public int moves()                      // min number of moves to solve initial board; -1 if no solution
    {
      
    }
    public Iterable<Board> solution()       // sequence of boards in a shortest solution; null if no solution
    {
      
    }
    */
      
    private class SearchNode implements Comparable<SearchNode>
    {
      public int move_num;
      public int priority;
      public String node_id;
      public String parent_id;
      public Board search_board;
      
      public SearchNode(Board new_board, String parent, String id, int parent_move)
      {
        //initialize the node, given the board, the next node value as id, and
        //id to the parent node. 
        search_board = new_board;
        move_num = parent_move + 1;
        parent_id = parent;
        node_id = id;
        priority = search_board.manhattan() + move_num;
                
      }
      public int compareTo(SearchNode that) 
      {
        if (this.priority < that.priority) { return -1; }
        else if (this.priority > that.priority) {return 1;}
        else return 0;
      }
    }
    
    
    public static void main(String[] args)  // solve a slider puzzle (given below)
    {
      int[][] arr0 = {{8, 1, 3},{4, 0, 2},{7,6,5}};
      int[][] arr1 = {{1, 2, 3},{4, 5, 6},{7,8,0}};
      int[][] arr2 = {{8, 1, 3},{4, 0, 2},{7,6,5}};
      Board puzzle = new Board(arr2);
      Solver solve_puzzle = new Solver(puzzle);
      
    }
}
