import java.util.Arrays;
public class PercolationStats {
  //called with the N and T. Where N is the size of the grid and T is the number
  //of trials that will be run. For each trial, we will calculate the number of 
  //sites that needed to be opened for percolation. 
  private double total_sites, trial_size, count;
  private double[] iterations;
  
  public PercolationStats(int N, int T) // perform T independent computational experiments on an N-by-N grid
  {
    total_sites = (double)N*N;
    trial_size = T;
    iterations = new double[T];
    for(int i = 0; i < T; i++){ //perform T iterations
      Percolation perc = new Percolation(N); //initialize a percolation object
      count = 0; //initialize count
      while (!perc.percolates()) {
        //need to open some random site
        int col = StdRandom.uniform(0,N);
        int row = StdRandom.uniform(0,N);
        perc.open(col,row);
        count++; //increment count
      }
      iterations[i] = count/total_sites;
    }
  }
  
  public void iterationCount () {
   System.out.println(Arrays.toString(iterations));
  }
   public double mean()                     // sample mean of percolation threshold
   {
     double sum = 0;
     for (int i = 0; i < trial_size; i++) {
       sum += iterations[i];
     }
     return sum/(double)trial_size;
   }
   
   public double stddev()                   // sample standard deviation of percolation threshold
   {
     return 0.00;
   }
   
   public double confidenceLo()             // returns lower bound of confidence interval
   {
     return 0.00;
     
   }
   public double confidenceHi()             // returns upper bound of confidence interval
   {
     return 0.00;
   }
   public static void main(String[] args)   // test client, described below
   {
     int N = Integer.parseInt(args[0]);
     int T = Integer.parseInt(args[1]);
     PercolationStats PS = new PercolationStats(N,T);
     System.out.println(PS.mean());
   }



}
